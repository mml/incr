(require "annotate-free-variables.ss")

(define-syntax (test-case stx)
  (syntax-case stx ()
    [(_ in out)
     #'(/test-case (quote in) (quote out))]))

(define (/test-case in expected)
  (printf "Case: ~a~n" (pretty-format in))
  (let ([out (annotate-free-variables in)])
    (unless (equal? out expected)
      (error 'test "Got ~a but expected ~a~n" out expected))))

(test-case (lambda () z) (lambda () (z) z))
(test-case (let () 10) (let () 10))
(test-case (* 2 2) (* 2 2))
(test-case (lambda (x) (* 2 x)) (lambda (x) () (* 2 x)))
(test-case (let ([y 10])
             (lambda (x) (+ x y)))
           (let ([y 10])
             (lambda (x) (y) (+ x y))))
(test-case (let ([z 10])
             (let ([y (lambda (x) (+ x z))]) y))
           (let ([z 10])
             (let ([y (lambda (x) (z) (+ x z))]) y)))
(test-case (lambda (f) (let ([x (f z)]) (* x x)))
           (lambda (f) (z) (let ([x (f z)]) (* x x))))
